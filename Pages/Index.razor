@using GestorDeGastosBS.Data.Response
@using GestorDeGastosBS.Authentication
@inject IUserAccountService userAccountService
@inject IJSRuntime js
@inject AuthenticationStateProvider authStateProvider
@inject NavigationManager urlHelper

@page "/"
@* @using ChartJs.Blazor.PieChart *@
<PageTitle>Index</PageTitle>
<AuthorizeView>
    <Authorized>
        <h1>Hello, world! </h1>
        <p>Autorizado</p>
        <p>@context.User.Identity.Name</p>
        Welcome to your new app.
        <SurveyPrompt Title="How is Blazor working for you?" />

        <h1>Chart Test</h1>
        
    </Authorized>
    <NotAuthorized>
        <div class="alert-danger">
            <p>No Autorizado</p>
        </div>
    </NotAuthorized>
</AuthorizeView>

@code
{
    @* [CascadingParameter]
    private Task<AuthenticationState> authenticationState {get; set; }

    private async Task DisplayName()
    {
        var authState = await authenticationState;
        var userName = $"Hola {authState.User.Identity.Name}";
        await js.InvokeVoidAsync("alert", userName);
    } *@
    @* private PieConfig _pieConfig;

    protected override void OnInitialized()
    {
        ConfigurePieConfig();
    }

    private void ConfigurePieConfig()
    {
        _pieConfig = new PieConfig();

        _pieConfig.Options = new PieOptions
        {
            Responsive = true,
            Title = new OptionsTitle
            {
                Display = true,
                Text = "Title of my chart"
            }
        };
        foreach(var party in new[] {"Party 1", "Party 2", "Party 3"})
        {
            _pieConfig.Data.Labels.Add(party);
        }

        var dataset = new PieDataset<int>(new[] {35, 50, 25})
        {
            BackgroundColor = new[]
            {
                ColorUtil.ColorHexString(255, 0, 0),
                ColorUtil.ColorHexString(0, 255, 0),
                ColorUtil.ColorHexString(0, 0, 255)
            }            
        };

        _pieConfig.Data.Datasets.Add(dataset);
    } *@
}